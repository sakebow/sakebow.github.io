<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1660Ti+AlmaLinux9搭建YOLO5环境</title>
    <url>/2023/12/27/YOLO/install/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>看着图像识别好像很有意思的样子，于是就自己搭了一个深度学习服务器。虽然说是服务器，实际上也是垃圾佬套装搭一个勉强够看的显卡。</p>
<span id="more"></span>

<h1 id="硬件配置"><a href="#硬件配置" class="headerlink" title="硬件配置"></a>硬件配置</h1><p>硬件配置对于现在的服务器配置而言可能有些滑稽了。</p>
<table>
<thead>
<tr>
<th align="center">key</th>
<th align="center">value</th>
</tr>
</thead>
<tbody><tr>
<td align="center">CPU</td>
<td align="center">e3-1245v3</td>
</tr>
<tr>
<td align="center">GPU</td>
<td align="center">GTX 1660Ti 6G(YESTON)</td>
</tr>
<tr>
<td align="center">memory</td>
<td align="center">SAMSUNG ECC 1600MHz 8Gx2</td>
</tr>
<tr>
<td align="center">motherboard</td>
<td align="center">B85itx(EPOX)</td>
</tr>
<tr>
<td align="center">HardDisk</td>
<td align="center">500G M2(IDK)</td>
</tr>
</tbody></table>
<p>滑稽归滑稽，能用还是能用。对于垃圾佬来说，这个配置可不低了。</p>
<h1 id="准备工作：CUDA适配性"><a href="#准备工作：CUDA适配性" class="headerlink" title="准备工作：CUDA适配性"></a>准备工作：CUDA适配性</h1><p>在这里格外强调一下，有个叫显卡适配性的东西，需要各位做好售前调研。官方也给出了适配性说明：<a href="https://developer.nvidia.com/cuda-gpus">点击此处跳转到该页面</a>。</p>
<p>适配性说明文档中对所有适配的显卡进行了说明，包括很多系列。在这里我们以最大众的<code>GTX</code>（也就是<code>GeForce</code>系列）为例：</p>
<p><img data-src="http://images.sakebow.cn/yolo/install/GeForce%E5%8A%9F%E8%83%BD%E5%8F%AF%E7%94%A8%E6%80%A7.png" alt="GeForce适配性说明"></p>
<p>可以看到每种卡支持什么都已经列出来了。不过单纯看这个<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="2.891ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 1278 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(778,0)"></path></g></g></g></svg></mjx-container>什么的可能有些难懂，这里需要额外观察这篇说明这些数字的文档：<a href="https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#compute-capabilities">可用性数字说明</a>。</p>
<p>其实也没什么相当值得注意的内容，只是单纯的告诉你哪些支持分布式共享内存，哪些支持更宽的位数，哪些支持<code>Tensor</code>核心等等内容。我们真正意义上关心的只有我们当前要买的卡，或者说已经有的卡是否在名单中。</p>
<p>显然，<code>1660Ti</code>不在里面，只有一个<code>1650Ti</code>。这就相当尴尬了。</p>
<p>你可能会有些迷惑，因为你明明在<code>CSDN</code>上看到有些网站写了这些玩意的，比如<a href="https://blog.csdn.net/wyf2015fei/article/details/105995237">深度学习小记录——显卡1660Ti适配的Tensorflow和CUDA、CUDNN安装教程</a>，又比如<a href="https://blog.csdn.net/weixin_45766925/article/details/107916680">Windows+GTX1660TI下安装CUDA 10.1&amp;cudnn 7.6.5 + tensorflow/pytorch</a></p>
<p>官方并没有一个详细的说明，实际测试下来似乎也确实能用。所以，目前我的猜测是，对于部分主流设备，<code>1660Ti</code>展现出较强的适配性。但是部分非主流设备，<code>1660Ti</code>多少会有点问题。可以总结为：<strong>官方也不确定是不是完美支持</strong>。</p>
<p>那就相当随机了。如果希望稳一手，还是买截图中存在的设备；如果希望极致性价比，买什么都行，但买上述列出设备之外的还是像开盲盒一样刺激。</p>
<h1 id="实际上手：CUDA安装"><a href="#实际上手：CUDA安装" class="headerlink" title="实际上手：CUDA安装"></a>实际上手：CUDA安装</h1><p>这些教程都已经很多了，没什么别的可讲的，有必要的话各位参照一下其他的教程就行了。</p>
<p>所以我在这里仅作总结：</p>
<p>如果是<code>Windows</code>，直接下载好所有的安装包，然后逐个双击开始安装，然后等待到结束后开始下一个安装包的安装。整体流程简单方便，没有什么难点。</p>
<p>如果是<code>Linux</code>，尤其是像我一样使用最新版的<code>AlmaLinux</code>的话，可能会遇到一点奇奇怪怪的问题。</p>
<p>在<code>Linux</code>中安装过程与<code>Windows</code>不同。<code>Windows</code>是<code>GeForce</code>驱动与<code>CUDA</code>驱动分开安装的，<code>Linux</code>的<code>GeForce</code>驱动在<code>CUDA</code>驱动里面集成了，作为一个选项给用户提供安装选择。所以，如果你优先安装了<code>GeForce</code>驱动，那就不要再勾选<code>CUDA</code>中的<code>GeForce</code>驱动了。如果你没有安装<code>GeForce</code>驱动，那就别忘了勾选<code>CUDA</code>中的<code>GeForce</code>驱动了。</p>
<p>由于我已经安装过了，所以这里利用人家<code>Ubuntu</code>的截图：</p>
<p><img data-src="http://images.sakebow.cn/yolo/install/CUDA%E4%B8%AD%E9%9B%86%E6%88%90%E7%9A%84GeForce%E9%A9%B1%E5%8A%A8.png" alt="CUDA中集成的GeForce驱动"></p>
<p>使用红色方框框住的部分就是<code>GeForce</code>驱动。如果你单独安装了，那就别勾选；如果直接安装的<code>CUDA</code>，那就勾选。</p>
<p>于是等待就好了。</p>
<h1 id="多嘴一句：全球主流才是稳一手"><a href="#多嘴一句：全球主流才是稳一手" class="headerlink" title="多嘴一句：全球主流才是稳一手"></a>多嘴一句：全球主流才是稳一手</h1><p>我安装的最新版。其实没有什么硬件限制，直接上最新的，没关系。有限制的是后来的框架底层，只要使用的是<code>PyTorch</code>、<code>Tensorflow</code>这两个主流深度学习框架就行。</p>
<p>全球主流的话，那就一定会有一个人为这个主流做出一点贡献。这个人可能是开源社区大佬，也有可能是官方在编人员。</p>
<p>如果你安装的是<code>PaddlePaddle</code>这类并没有在全球成为主流的深度学习框架的话，即使官方文档再怎么充分、再怎么细致，有些兼容问题还是没办法。比如<code>PaddlePaddle</code>，如果直接上最新的<code>CUDA</code>一定会出现问题，甚至<code>gcc</code>与<code>g++</code>版本较高也一定会出现问题。最坏的情况是设备全部重买，最好的情况是降版本重装。总之跟垃圾佬折腾硬件一样需要一步一个脚印地折腾。</p>
<h1 id="cudnn才是真正的玄学"><a href="#cudnn才是真正的玄学" class="headerlink" title="cudnn才是真正的玄学"></a>cudnn才是真正的玄学</h1><p>如果说主流框架没有什么<code>CUDA</code>版本的限制，那么<code>cudnn</code>这类深度底层的东西就该有限制了吧？</p>
<p>确实，有限制。但是怎么限制的，我还没弄明白。总之，如果你使用的显卡在适配性说明中并没有出现，但是<code>CUDA</code>顺利安装了，<code>cudnn</code>就会展现出它的作用。</p>
<p>在执行测试的时候，使用命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python3 <span class="comment"># 尝试测试</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; import torch <span class="comment"># 导入包</span></span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; torch.cuda.is_available() <span class="comment"># 检测显卡可用性</span></span></span><br><span class="line">true # 返回可用</span><br></pre></td></tr></table></figure>

<p>这一切都看起来没问题。</p>
<p>但是在执行<code>train.py</code>的时候，问题来了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">RuntimeError: CUDA error: no kernel image is available for execution on the device</span><br></pre></td></tr></table></figure>

<p>你可能认为是环境问题，实际上就是环境不兼容罢了。但比较奇怪的是，没有环境兼容。我也做过很多次测试，但是就是不行。</p>
<p>只能说，全是玄学。</p>
<p>删除<code>cudnn</code>后一切正常，显卡也确实比苹果电脑<code>M1</code>的核显要快上<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.532ex" role="img" focusable="false" viewBox="0 -677 500 677"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g></svg></mjx-container>倍左右，也不确定是否正常。</p>
<p>凑合着用吧。</p>
]]></content>
      <categories>
        <category>YOLO</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>YOLO5</tag>
      </tags>
  </entry>
  <entry>
    <title>transition与keyframes配合hover形成动画的区别</title>
    <url>/2023/12/23/CSS/transition/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>并没有多高深的见解，本篇只是单纯的复习动画效果。</p>
<span id="more"></span>

<h1 id="keyframes可以用于动画效果"><a href="#keyframes可以用于动画效果" class="headerlink" title="keyframes可以用于动画效果"></a>keyframes可以用于动画效果</h1><p>对于<code>keyframes</code>，我们可以简单设定每个关键帧的具体状态，从而使得<code>hover</code>能够触发一些动画。</p>
<p>比如，我们对<code>position</code>为<code>absolute</code>、<code>left</code>为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="5.154ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 2278 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(778,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g></g></g></svg></mjx-container>的<code>div</code>设定这样一个动画：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> move-<span class="attribute">right</span> {</span><br><span class="line">  from {</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">100%</span>;</span><br><span class="line">  }</span><br><span class="line">  to {</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">100%</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p>如果<code>div</code>有颜色的话，那这个动画效果就像是让<code>div</code>飞过去了一样。当然如果速度慢一点就是飘过去的。</p>
<p>但是，如果并不是那么巧，我们所设定的<code>left</code>如果只有<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 1000 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container>，那么<code>div</code>就会停在一半。</p>
<p>这个时候，如果把鼠标移出来，就会出现一个很尴尬的场景：</p>
<p><code>div</code><strong>直接闪回了</strong>。那是因为鼠标移出后，<code>hover</code>事件立即就结束了，对应的<code>animation</code>设置也就直接结束了，<code>div</code>恢复到<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="5.154ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 2278 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(778,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g></g></g></svg></mjx-container>的状态。</p>
<p>这可并不美观。</p>
<h1 id="transition用于补足上述缺陷"><a href="#transition用于补足上述缺陷" class="headerlink" title="transition用于补足上述缺陷"></a>transition用于补足上述缺陷</h1><p>这个时候，<code>transition</code>就来了，它可以通过设定</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> {</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">1s</span> ease-out;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p>这样就表示，无论是什么情况，只要某个事件触发了<code>div</code>的某种属性的改变，那么就会用<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="2.192ex" height="1.529ex" role="img" focusable="false" viewBox="0 -666 969 676"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g></g></svg></mjx-container>的时间、逐渐变慢的改变速度，来实现这样一个动画效果。同时，按照同样的时间与速度缓慢恢复到原来的状态。</p>
<blockquote>
<p>需要注意的是，<code>transition</code>需要放在<code>div</code>下，而不是<code>div:hover</code>下。</p>
</blockquote>
<p>当然，<code>transition</code>也并不是完美的。比如，<code>linear-gradient</code>这类就没有办法。</p>
<p>并不是说<code>transition</code>没有办法做到，而是说，<code>linear-gradient</code>本身就不是个好惹的家伙。因为他实际上是<strong>图片</strong>，所以定了就是定了。</p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>experience</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/12/20/hello-world/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这是根据<a href="https://hexo.io/">Hexo</a>的官方内置<code>Hello World</code>文章进行了亿点点修改后形成的文章，用于给小伙伴们当一个教程使用。</p>
<span id="more"></span>

<h1 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h1><p>首先，我们下载<code>Hexo</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>然后，我们准备自己中意的主题，我这里选择<a href="https://github.com/next-theme/hexo-theme-next">NexT</a>。</p>
<p>虽然说现在<code>NexT</code>已经可以直接使用<code>npm</code>安装了，但是我还是希望能够保持<code>NexT</code>的高度自定义，所以还是选择了<code>git</code>安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/next-theme/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure>

<p>在这里，我们需要区分一下：<code>Hexo</code>本身有一个配置文件叫<code>_config.yml</code>，而<code>NexT</code>也有一个。接下来我们将利用<code>Hexo_config</code>与<code>NexT_config</code>来区分这两个文件。</p>
<p>在<code>Hexo_config</code>中，我们修改一下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>

<p>然后就可以愉快的使用了。</p>
<h1 id="运行使用"><a href="#运行使用" class="headerlink" title="运行使用"></a>运行使用</h1><p>为了查看效果，我们直接使用这条命令就好：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>而为了部署做准备的话，就需要用这个生成：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>最后的部署，那就是这个：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>需要注意的是：部署过程可能会存在各种各样的bug，所以最好还是使用这个命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g -d</span><br></pre></td></tr></table></figure>

<p>这样生成之后立即部署，就一点问题没有。</p>
]]></content>
      <categories>
        <category>starter</category>
      </categories>
      <tags>
        <tag>Hello-World</tag>
      </tags>
  </entry>
  <entry>
    <title>RuoYi框架结合OpenLayer实现地图模块</title>
    <url>/2023/12/26/WebGIS/ruoyi-admin-openlayer/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>有一个需求需要使用<code>RuoYi</code>框架搭配<code>OpenLayer</code>使用。于是记录一下遇到的问题。</p>
<span id="more"></span>

<h1 id="eslint"><a href="#eslint" class="headerlink" title="eslint"></a>eslint</h1><p>首先在安装包的过程中，就已经出现包冲突了。</p>
<p>报错信息主要是在说<code>eslint-loader</code>的<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="4.652ex" height="1.507ex" role="img" focusable="false" viewBox="0 -666 2056 666"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(778,0)"></path></g><g data-mml-node="mn" transform="translate(1278,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(278,0)"></path></g></g></g></svg></mjx-container>版本与<code>eslint</code>的<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="4.652ex" height="1.579ex" role="img" focusable="false" viewBox="0 -676 2056 698"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(778,0)"></path></g><g data-mml-node="mn" transform="translate(1278,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(278,0)"></path></g></g></g></svg></mjx-container>版本不兼容。在处理<code>eslint-loader</code>版本信息的时候，依赖<code>eslint</code>的版本应该在<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="4.652ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 2056 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(778,0)"></path></g><g data-mml-node="mn" transform="translate(1278,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(278,0)"></path></g></g></g></svg></mjx-container>（含）到<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="4.652ex" height="1.579ex" role="img" focusable="false" viewBox="0 -676 2056 698"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(778,0)"></path></g><g data-mml-node="mn" transform="translate(1278,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(278,0)"></path></g></g></g></svg></mjx-container>（不含）之间。</p>
<p>所以，修改<code>package.json</code>文件，将<code>eslint</code>的版本从<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="4.652ex" height="1.579ex" role="img" focusable="false" viewBox="0 -676 2056 698"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(778,0)"></path></g><g data-mml-node="mn" transform="translate(1278,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(278,0)"></path></g></g></g></svg></mjx-container>降到<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="4.652ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 2056 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(778,0)"></path></g><g data-mml-node="mn" transform="translate(1278,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(278,0)"></path></g></g></g></svg></mjx-container>。</p>
<p>改了这个之后，<code>npm install</code>命令不再报错。</p>
<h1 id="OpenLayer"><a href="#OpenLayer" class="headerlink" title="OpenLayer"></a>OpenLayer</h1><p><code>OpenLayer</code>是用于在<code>web</code>页面上展示地图的高效前端框架。在结合<code>RuoYi</code>的时候发现<code>npm install</code>命令并没有报错，但是运行<code>npm run dev</code>命令报错。</p>
<p>报错信息：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">Module parse failed: Unexpected token (165:61)                                                                                                                    </span><br><span class="line">You may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders</span><br><span class="line">|      * @private                                                                                                                                                 </span><br><span class="line">|      */                                                                                                                                                         </span><br><span class="line">&gt;     this.hitDetectionEnabled_ = options.hitDetectionEnabled ?? true;                                                                                            </span><br><span class="line">|                                                                                                                                                                 </span><br><span class="line">|     const customAttributes = options.attributes</span><br></pre></td></tr></table></figure>

<p>可以看到将报错信息指向了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">hitDetectionEnabled_</span> = options.<span class="property">hitDetectionEnabled</span> ?? <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>

<p>乍一看是没有任何问题的，但是具体而言的话就是这个命令：<code>??</code>。</p>
<p>这是什么东西呢？是<code>ES2020</code>新特性中的一个符号，作用是：<em>如果前面一个值是<code>null</code>或者<code>undefined</code>，那就输出后面一个值</em>。</p>
<p>于是，问题就在这里了，<code>RuoYi</code>的各类框架并不支持<code>ES2020</code>。具体是哪一个，并不清楚。为了稳一手，将<code>OpenLayer</code>的版本降下去。</p>
<p>经测试，最大支持版本是<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="4.652ex" height="1.581ex" role="img" focusable="false" viewBox="0 -677 2056 699"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(778,0)"></path></g><g data-mml-node="mn" transform="translate(1278,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(278,0)"></path></g></g></g></svg></mjx-container>，从<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="4.652ex" height="1.579ex" role="img" focusable="false" viewBox="0 -676 2056 698"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(778,0)"></path></g><g data-mml-node="mn" transform="translate(1278,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(278,0)"></path></g></g></g></svg></mjx-container>以上的版本都是<code>ES2020</code>的了。</p>
<p>所以，修改<code>package.json</code>文件，将<code>ol</code>的版本从最新的<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="4.652ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 2056 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(778,0)"></path></g><g data-mml-node="mn" transform="translate(1278,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(278,0)"></path></g></g></g></svg></mjx-container>降到<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="4.652ex" height="1.581ex" role="img" focusable="false" viewBox="0 -677 2056 699"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(778,0)"></path></g><g data-mml-node="mn" transform="translate(1278,0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(278,0)"></path></g></g></g></svg></mjx-container>。</p>
<h1 id="成功"><a href="#成功" class="headerlink" title="成功"></a>成功</h1><p>最后，我们使用<code>npm run dev</code>就能够运行了。</p>
<p><img data-src="http://images.sakebow.cn/WebGIS/ruoyi-admin-openlayer/%E8%A7%A3%E5%86%B3%E7%89%88%E6%9C%AC%E5%86%B2%E7%AA%81%E5%B0%B1%E8%83%BD%E8%BF%90%E8%A1%8C%E4%BA%86.png" alt="解决版本冲突就能运行了"></p>
]]></content>
      <categories>
        <category>customize</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>customize</tag>
      </tags>
  </entry>
  <entry>
    <title>AlmaLinux9安装clash</title>
    <url>/2023/12/27/experience/clash-for-linux/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>大部分梯子都没有<code>Linux</code>客户端。这次找到了一个有<code>shadowsockets</code>订阅链接的梯子，就痛定思痛安装一个<code>clash</code>。</p>
<span id="more"></span>

<h1 id="clash下载"><a href="#clash下载" class="headerlink" title="clash下载"></a>clash下载</h1><p>很久很久以前，翻墙还是靠着<code>shadowsockets</code>。现如今虽然有很多新的技术，但<code>shadowsockets</code>依然占有很大一部分市场份额。<code>clash</code>就是一种<code>shadowsockets</code>客户端。</p>
<p>只是很不幸的是，<code>clash</code>作者已经不再维护了。要么是进去了，要么是躲起来了，总之是失能了。</p>
<p>虽然不再维护，工具终归还是工具，由于翻墙性质的特点，并不强依赖于作者是否更新，而依赖于海外服务器是否存在。</p>
<p>所以，这里有人准备了<code>clash-for-linux-backup</code>，作为最后的备份。<a href="https://github.com/Elegybackup/clash-for-linux-backup">点击这里跳转到GitHub库</a></p>
<p>于是下载该文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> /usr/local/bin</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/Elegybackup/clash-for-linux-backup.git</span></span><br><span class="line">[Optional] $ sudo mv clash-for-linux-backup clash</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> clash-for-linux-backup</span></span><br></pre></td></tr></table></figure>

<p>这样，我们就有了<code>clash</code>的基本内容了。</p>
<h1 id="配置订阅链接"><a href="#配置订阅链接" class="headerlink" title="配置订阅链接"></a>配置订阅链接</h1><p>有了工具之后，我们就需要配置我们的服务了。首先我们先修改<code>clash</code>自己的配置文件，在<code>clash</code>根目录下的<code>.env</code>文件中。部分<code>Linux</code>系统使用<code>ls</code>与<code>ll</code>都无法显示<code>.</code>开头的文件，需要使用命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span> -a</span></span><br></pre></td></tr></table></figure>

<p>找到了其中的<code>.env</code>文件后，就按照下述命令配置文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo vim .<span class="built_in">env</span></span></span><br><span class="line">[input] i</span><br><span class="line">[input] export CLASH_URL=&#x27;$&#123;购买的或者跳板机上搭建的订阅地址&#125;&#x27;</span><br><span class="line">[input] export CLASH_SECRET=&#x27;&#x27;</span><br><span class="line">[input] :wq[enter]</span><br></pre></td></tr></table></figure>

<p>其中，含有[input]标识的命令表示在<code>vim</code>内的输入，直接按对应的键，不需要有多余的操作。</p>
<h1 id="文件编码问题"><a href="#文件编码问题" class="headerlink" title="文件编码问题"></a>文件编码问题</h1><p>似乎一切都没问题了，我们执行一下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> <span class="variable">$&#123;clash-home&#125;</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">bash start.sh</span></span><br></pre></td></tr></table></figure>

<p>然后就报错无法识别。经查询发现是文件编码问题。</p>
<p>既然是编码问题就有两种解法，一个是全部重写，一个是直接转换编码。我还是选择了转换编码。</p>
<p>于是将所有的<code>sh</code>后缀名文件一个个用<code>vim</code>打开，然后修改编码。如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo vim start.sh</span></span><br><span class="line">[input] :set ff=unix[enter]</span><br><span class="line">[input] :wq[enter]</span><br></pre></td></tr></table></figure>

<p>其中，涉及到的文件有<code>start.sh</code>、<code>shutdown.sh</code>、<code>restart.sh</code>以及<code>scripts</code>文件夹下的所有文件，最好全都设置一遍。</p>
<p>然后，执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo bash start.sh</span></span><br></pre></td></tr></table></figure>

<p>如果出现要你执行<code>source /etc/profile.d/clash.sh</code>后执行<code>proxy_on</code>的提示，那就说明启动成功了。</p>
<h1 id="管理界面"><a href="#管理界面" class="headerlink" title="管理界面"></a>管理界面</h1><p>由于命令行的限制，无法通过命令行显示当前订阅内容。但是可以通过执行成功后返回的地址与密钥进行可视化设置。一般的，地址为<code>localhost:9090/ui</code>，账号为<code>localhost:9090</code>，密码为很长一串十六进制字符构成的字符串。访问后能够在订阅中查看。</p>
<p>最后，根据clash默认转发端口，设置系统代理。在桌面环境下比较方便：</p>
<p><img data-src="http://images.sakebow.cn/experience/clash-for-linux/%E8%AE%BE%E7%BD%AE%E7%B3%BB%E7%BB%9F%E4%BB%A3%E7%90%86.png" alt="设置系统代理"></p>
<p>这些是<code>clash</code>的默认转发端口。</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>至此，可以翻出去了。</p>
<p>需要注意的是，我们在<code>Linux</code>的设置页面中设置的是系统代理，所以浏览器也能够直接访问了。</p>
]]></content>
      <categories>
        <category>experience</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>clash</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo设置更多的动态背景图</title>
    <url>/2023/12/26/custom/background-dynamic-more/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在<a href="/2023/12/25/custom/background-dynamic/">这篇文章中</a>，我们学习了如何设置固定数量的动态背景图。接下来，我们在这篇文章的基础上继续增加功能，让动态背景图的数量也不是固定的、图像也不是固定的。</p>
<span id="more"></span>

<h1 id="动态的背景图"><a href="#动态的背景图" class="headerlink" title="动态的背景图"></a>动态的背景图</h1><p>在这里，我个人想从两个方面解释<strong>动态</strong>。</p>
<p>一方面是当前呈现的图片是不断轮转的，这是轮播图的基本定义。</p>
<p>另一方面就是呈现的图片并不是一开始就固定好的，而是在轮播的过程中不断更新的。</p>
<p>第一个方面我们已经实现了，在这里也就不多赘述。接下来我们思考如何实现第二个方面。</p>
<h1 id="更新图库"><a href="#更新图库" class="headerlink" title="更新图库"></a>更新图库</h1><p>为了响应速度更快，我个人倾向于将<code>loading</code>期间加载的内容固定下来，主要是为了能够让<code>loading</code>期间有一个基本的轮播图。</p>
<p>然后，在第一张图片轮转消失后，更新第一张图片。这样的话，显示的是第二张图片，而第一张图片已经在你看不见的地方更新掉了。当回到第一张图片的时候，我们发现轮转出来的是一张新的图片。</p>
<p>这样就能够分两个阶段给出一大批背景图片了。</p>
<h1 id="时间计算"><a href="#时间计算" class="headerlink" title="时间计算"></a>时间计算</h1><p>还记得上一篇文章吗，我们使用<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.324ex" height="1.581ex" role="img" focusable="false" viewBox="0 -677 1469 699"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(500,0)"></path></g><g data-mml-node="mi" transform="translate(1000,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g></g></svg></mjx-container>的时间作为一整轮的轮播动画时间。这也就意味着，算上淡入淡出，一张图片的整个周期也就是<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="13.255ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 5858.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(500,0)"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1000,0)"><g data-mml-node="mo"><path data-c="F7" d="M318 466Q318 500 339 518T386 537Q418 537 438 517T458 466Q458 438 440 417T388 396Q355 396 337 417T318 466ZM56 237T56 250T70 270H706Q721 262 721 250T706 230H70Q56 237 56 250ZM318 34Q318 68 339 86T386 105Q418 105 438 85T458 34Q458 6 440 -15T388 -36Q355 -36 337 -15T318 34Z"></path></g></g><g data-mml-node="mn" transform="translate(1778,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(2555.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3611.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(4611.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(5000.6,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(5469.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p>
<p>为了让第一张图片在这个周期之外更新，我们所需要做的，首先就是确定<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.324ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 1469 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path></g><g data-mml-node="mi" transform="translate(1000,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g></g></svg></mjx-container>的周期执行更新动作。</p>
<p>但是，光有这个<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.324ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 1469 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path></g><g data-mml-node="mi" transform="translate(1000,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g></g></svg></mjx-container>可不够。我们都知道，当浏览器加载过一次图片之后，下一次加载该图片将从缓存中直接读取，也就是我们寻常所说的<strong>命中缓存</strong>。</p>
<p>命中后，加载速度是相当迅猛的。我们不能赌他的枪里没有子弹。所以我们还需要额外设计一个定时器，要让这个<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.324ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 1469 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path></g><g data-mml-node="mi" transform="translate(1000,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g></g></svg></mjx-container>的周期稍微缓上一缓，才能够保证更新时间是处于我们所看不到的时间段内。</p>
<p>还记得上一篇文章的流程图吗：</p>
<pre class="mermaid">graph LR
    A[第一张图片]--25%--&gt;B[第二张图片]--25%--&gt;C[第三张图片]--25%--&gt;D[第四张图片]--25%--&gt;A</pre>

<p>我们主要是额外增加一个逻辑，让图片能够跟着时间有些修改：</p>
<pre class="mermaid">graph LR
    subgraph 轮播图
        A[第一张图片]--25%--&gt;B[第二张图片]--25%--&gt;C[第三张图片]--25%--&gt;D[第四张图片]--25%--&gt;A
    end
    subgraph 同步更新
        E[等待2s]--&gt;F[等待25%的动画结束]--&gt;G[更新图片]--&gt;F
    end
    subgraph 计数器
        H[[count = 0]] --&gt; I[count] --&gt; K[count mod 4]
        G --&gt; I
        K --&gt;|=0| A
        K --&gt;|=1| B
        K --&gt;|=2| C
        K --&gt;|=3| D
    end</pre>

<p>当然，除了<code>mod</code>计算，还有满<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.532ex" role="img" focusable="false" viewBox="0 -677 500 677"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g></svg></mjx-container>归零的方法，可以画成这样：</p>
<pre class="mermaid">graph LR
    subgraph 轮播图
        A[第一张图片]--25%--&gt;B[第二张图片]--25%--&gt;C[第三张图片]--25%--&gt;D[第四张图片]--25%--&gt;A
    end
    subgraph 同步更新
        E[等待2s]--&gt;F[等待25%的动画结束]--&gt;G[更新图片]--&gt;F
    end
    subgraph 计数器
        G--&gt;I{count = 4 ?}--yes--&gt;J[count - 4]--&gt;H--&gt;A
        O[[count = 0]] --&gt; I
        H[count = 0]
        L[count = 1] --&gt; B
        M[count = 2] --&gt; C
        N[count = 3] --&gt; D
        I--no--&gt;K[+1]--&gt;|+1| L &amp; M &amp; N
    end</pre>

<h1 id="修改src属性还是直接将整个img标签替换掉"><a href="#修改src属性还是直接将整个img标签替换掉" class="headerlink" title="修改src属性还是直接将整个img标签替换掉"></a>修改src属性还是直接将整个img标签替换掉</h1><p>在这里，主要讨论的就是更新图片过程中，我们是修改<code>src</code>还是直接将整个<code>img</code>标签替换掉。</p>
<p>如果你有一定的经验，你会发现，如果<code>src</code>相同，则会直接命中缓存，不会更新图片。对于我们目前而言似乎确实可以使用，因为我们的背景图片并不会随意修改，而是始终保持链接。 当然，如果你有更多的经验，你会想到，在<code>GET</code>请求中加上一个时间戳，浏览器就会误以为这是一次新的请求，能够保证始终更新图片。</p>
<p>而如果是整个<code>img</code>直接替换掉，浏览器就会开始渲染流程，能够确保本次请求是一定能够被加载的。</p>
<p>当然，每种方法都有自己的优势跟弊端，这就需要各位自行判断了。接下来我将以替换整个<code>img</code>为例进行说明。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>好了，又到了<code>show me the code</code>环节。</p>
<h2 id="保存位置"><a href="#保存位置" class="headerlink" title="保存位置"></a>保存位置</h2><p>我们还是选择<code>source/js/utils.js</code>文件，在我们最开始增加的<code>addBackgroundImageDiv</code>方法的最下面继续增加：</p>
<h2 id="增加代码"><a href="#增加代码" class="headerlink" title="增加代码"></a>增加代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// set background image url after rolling</span></span><br><span class="line"><span class="comment">// --------------------------------------</span></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> imgUrls = { <span class="string">'pc'</span>: [</span><br><span class="line">  <span class="string">'/race-miku.jpg'</span>, <span class="string">'/masuri-miku.jpg'</span>, <span class="string">'/planet-miku.jpg'</span>, <span class="string">'/4mikus.jpg'</span>, <span class="string">'/84672028_p0.jpg'</span>, <span class="string">'/84932457_p0.png'</span></span><br><span class="line">] }</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">readyState</span> === <span class="string">'complete'</span>) {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'done'</span>);</span><br><span class="line">    <span class="keyword">let</span> imgChangeInterval = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> imageChangeTimeOut = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'timeout'</span>);</span><br><span class="line">      <span class="keyword">if</span> (imgChangeInterval != <span class="literal">null</span>) {</span><br><span class="line">        <span class="built_in">clearInterval</span>(imgChangeInterval);</span><br><span class="line">        imgChangeInterval = <span class="literal">null</span>;</span><br><span class="line">      }</span><br><span class="line">      imgChangeInterval = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">        <span class="keyword">const</span> imageDivElement = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">"image-scroller"</span>).<span class="property">children</span>[count % <span class="number">4</span>];</span><br><span class="line">        <span class="keyword">let</span> sampleImg = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * imgUrls[<span class="variable constant_">DEVICES</span>[<span class="number">0</span>]].<span class="property">length</span>);</span><br><span class="line">        imageDivElement.<span class="property">innerHTML</span> = <span class="string">"&lt;img"</span> +</span><br><span class="line">          <span class="string">" src='"</span> + <span class="variable constant_">BASE_URL</span> + <span class="variable constant_">DEVICES</span>[<span class="number">0</span>] + imgUrls[<span class="variable constant_">DEVICES</span>[<span class="number">0</span>]][sampleImg] + <span class="string">"'"</span> +</span><br><span class="line">          <span class="string">" style='width: 100%; height: 100%;'"</span> +</span><br><span class="line">          <span class="string">" alt='network broken?' /&gt;"</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`changed, now is <span class="subst">${count % <span class="number">4</span>}</span> and <span class="subst">${imgUrls[DEVICES[<span class="number">0</span>]][sampleImg]}</span>`</span>) <span class="comment">// yes</span></span><br><span class="line">        ++count;</span><br><span class="line">      }, <span class="number">64000</span> / <span class="number">4</span>);</span><br><span class="line">      <span class="built_in">clearTimeout</span>(imageChangeTimeOut);</span><br><span class="line">    }, <span class="number">2000</span>);</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="comment">// well done! now images can be updated!</span></span><br></pre></td></tr></table></figure>

<p>这些代码能够按照约定更新图片，达到更多图片的轮播效果。虽然本文展示案例的时候只用了<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.507ex" role="img" focusable="false" viewBox="0 -666 500 666"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></svg></mjx-container>个图片（有<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.532ex" role="img" focusable="false" viewBox="0 -677 500 677"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g></svg></mjx-container>个是上一篇固定的），但是使用本文的代码就能够实现更多的图片了。</p>
<h2 id="目前没能完成的内容"><a href="#目前没能完成的内容" class="headerlink" title="目前没能完成的内容"></a>目前没能完成的内容</h2><p>当然，毕竟是人做的，总有没完善的地方。</p>
<p>比如，在选取图片的时候，是在总图片中进行均匀采样选取的。这就意味着，从最开始的<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.532ex" role="img" focusable="false" viewBox="0 -677 500 677"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g></svg></mjx-container>张固定好的图片是有序的，后面就开始无序随机出现了。</p>
<p>当然这也是一种乐趣，所以个人觉得修改的意义并不是很大。</p>
<p>其次就是，<code>count</code>变量会始终增加。我并不知道是不是真的有人把这个网站挂一天来看看<code>count</code>到底会不会溢出，但是这确实是一个风险。</p>
<p>如果你觉得有必要修改的话，可以在逻辑中增加一个</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">count = count === <span class="number">4</span> ? <span class="number">0</span> : count;</span><br></pre></td></tr></table></figure>

<h2 id="没什么必要的其他东西"><a href="#没什么必要的其他东西" class="headerlink" title="没什么必要的其他东西"></a>没什么必要的其他东西</h2><p>同时，在代码中我也留下了三个节点的<code>console.log</code>方法，能够让各位能够感受到浏览器页面加载状态改变为<code>complete</code>的时候、<code>TimeOut</code>被触发的时候、<code>Interval</code>被触发的时候。</p>
<p>如果不出意外的话，<code>complete</code>输出将会很快出现，然后在<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="2.192ex" height="1.529ex" role="img" focusable="false" viewBox="0 -666 969 676"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g></g></svg></mjx-container>后出现<code>timeout</code>，接下来每<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.324ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 1469 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path></g><g data-mml-node="mi" transform="translate(1000,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g></g></svg></mjx-container>产生<code>changed</code>输出。</p>
<h2 id="两篇文章的全部代码"><a href="#两篇文章的全部代码" class="headerlink" title="两篇文章的全部代码"></a>两篇文章的全部代码</h2><p>如果你是单纯复制本篇文章中的内容，可能并不能运行起来。因为诸如<code>DEVICES</code>、<code>BASE_URL</code>这类变量是上一篇文章中定义的变量。</p>
<p>所以，在这里，我将给出两篇文章的全部代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这是官方的自启动函数</span></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">onPageLoaded</span> = (<span class="params"></span>) =&gt; <span class="variable language_">document</span>.<span class="title function_">dispatchEvent</span>(</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Event</span>(<span class="string">'page:loaded'</span>, {</span><br><span class="line">      <span class="attr">bubbles</span>: <span class="literal">true</span></span><br><span class="line">    })</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">readyState</span> === <span class="string">'loading'</span>) {</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">'readystatechange'</span>, onPageLoaded, { <span class="attr">once</span>: <span class="literal">true</span> });</span><br><span class="line">    <span class="title function_">addBackgroundImageDiv</span>(); <span class="comment">// 我在这里增加了自己的内容</span></span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="title function_">onPageLoaded</span>();</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">'pjax:success'</span>, onPageLoaded);</span><br><span class="line">})();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后就是实现自己的内容</span></span><br><span class="line"><span class="comment">// add our custom dynamic background image</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addBackgroundImageDiv</span> () {</span><br><span class="line">  <span class="comment">// create dom element for background images</span></span><br><span class="line">  <span class="comment">// ----------------------------------------</span></span><br><span class="line">  <span class="keyword">const</span> opacityMask = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">"div"</span>);</span><br><span class="line">  opacityMask.<span class="property">style</span>.<span class="property">background</span> = <span class="string">"linear-gradient(#fff, #ffced9, #fff)"</span>;</span><br><span class="line">  opacityMask.<span class="property">style</span>.<span class="property">position</span> = <span class="string">"fixed"</span>;</span><br><span class="line">  opacityMask.<span class="property">style</span>.<span class="property">top</span> = <span class="string">"0"</span>;</span><br><span class="line">  opacityMask.<span class="property">style</span>.<span class="property">left</span> = <span class="string">"0"</span>;</span><br><span class="line">  opacityMask.<span class="property">style</span>.<span class="property">content</span> = <span class="string">""</span>;</span><br><span class="line">  opacityMask.<span class="property">style</span>.<span class="property">width</span> = <span class="string">"100%"</span>;</span><br><span class="line">  opacityMask.<span class="property">style</span>.<span class="property">height</span> = <span class="string">"100%"</span>;</span><br><span class="line">  opacityMask.<span class="property">style</span>.<span class="property">opacity</span> = <span class="string">"0.8"</span>;</span><br><span class="line">  opacityMask.<span class="property">style</span>.<span class="property">zIndex</span> = <span class="string">"-2"</span>;</span><br><span class="line">  <span class="keyword">const</span> imageContainer = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">"div"</span>);</span><br><span class="line">  imageContainer.<span class="property">style</span>.<span class="property">position</span> = <span class="string">"fixed"</span>;</span><br><span class="line">  imageContainer.<span class="property">style</span>.<span class="property">top</span> = <span class="string">"0"</span>;</span><br><span class="line">  imageContainer.<span class="property">style</span>.<span class="property">left</span> = <span class="string">"0"</span>;</span><br><span class="line">  imageContainer.<span class="property">style</span>.<span class="property">content</span> = <span class="string">""</span>;</span><br><span class="line">  imageContainer.<span class="property">style</span>.<span class="property">width</span> = <span class="string">"100%"</span>;</span><br><span class="line">  imageContainer.<span class="property">style</span>.<span class="property">height</span> = <span class="string">"100%"</span>;</span><br><span class="line">  imageContainer.<span class="property">style</span>.<span class="property">zIndex</span> = <span class="string">"-3"</span>;</span><br><span class="line">  <span class="keyword">const</span> imageScroller = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">"div"</span>);</span><br><span class="line">  imageScroller.<span class="property">id</span> = <span class="string">"image-scroller"</span>;</span><br><span class="line">  imageScroller.<span class="property">style</span>.<span class="property">position</span> = <span class="string">"fixed"</span>;</span><br><span class="line">  imageScroller.<span class="property">style</span>.<span class="property">top</span> = <span class="string">"0"</span>;</span><br><span class="line">  imageScroller.<span class="property">style</span>.<span class="property">left</span> = <span class="string">"0"</span>;</span><br><span class="line">  imageScroller.<span class="property">style</span>.<span class="property">content</span> = <span class="string">""</span>;</span><br><span class="line">  imageScroller.<span class="property">style</span>.<span class="property">width</span> = <span class="string">"400%"</span>;</span><br><span class="line">  imageScroller.<span class="property">style</span>.<span class="property">height</span> = <span class="string">"100%"</span>;</span><br><span class="line">  imageScroller.<span class="property">style</span>.<span class="property">display</span> = <span class="string">"flex"</span>;</span><br><span class="line">  imageContainer.<span class="property">style</span>.<span class="property">justifyContent</span> = <span class="string">"space-around"</span>;</span><br><span class="line">  imageContainer.<span class="property">style</span>.<span class="property">alignContent</span> = <span class="string">"center"</span>;</span><br><span class="line">  imageContainer.<span class="property">style</span>.<span class="property">alignItems</span> = <span class="string">"center"</span>;</span><br><span class="line">  imageScroller.<span class="property">style</span>.<span class="property">zIndex</span> = <span class="string">"-4"</span>;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(opacityMask);</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(imageContainer);</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(imageScroller);</span><br><span class="line">  <span class="comment">// well done! basic frames established!</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// url for background images</span></span><br><span class="line">  <span class="comment">// -------------------------</span></span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">BASE_URL</span> = <span class="string">'http://images.sakebow.cn/bgimage/'</span></span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">DEVICES</span> = [<span class="string">'pc'</span>]</span><br><span class="line">  <span class="keyword">const</span> imgWindowUrl = { <span class="string">'pc'</span>: [</span><br><span class="line">    <span class="string">'/race-miku.jpg'</span>, <span class="string">'/masuri-miku.jpg'</span>, <span class="string">'/planet-miku.jpg'</span>, <span class="string">'/4mikus.jpg'</span></span><br><span class="line">  ] };</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> imgUrlItem <span class="keyword">of</span> imgWindowUrl[<span class="string">'pc'</span>]) {</span><br><span class="line">    <span class="keyword">const</span> imageFrameItemContainer = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">"div"</span>);</span><br><span class="line">    imageFrameItemContainer.<span class="property">style</span>.<span class="property">width</span> = imageContainer.<span class="property">style</span>.<span class="property">width</span>;</span><br><span class="line">    imageFrameItemContainer.<span class="property">style</span>.<span class="property">height</span> = <span class="string">"100%"</span>;</span><br><span class="line">    imageFrameItemContainer.<span class="property">innerHTML</span> = <span class="string">"&lt;img"</span> +</span><br><span class="line">      <span class="string">" src='"</span> + <span class="variable constant_">BASE_URL</span> + <span class="variable constant_">DEVICES</span>[<span class="number">0</span>] + imgUrlItem + <span class="string">"'"</span> +</span><br><span class="line">      <span class="string">" style='width: 100%; height: 100%;'"</span> +</span><br><span class="line">      <span class="string">" alt='network broken?' /&gt;"</span>;</span><br><span class="line">    imageScroller.<span class="title function_">appendChild</span>(imageFrameItemContainer);</span><br><span class="line">  }</span><br><span class="line">  <span class="comment">// well done! all images ready!</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// keyframe to roll images</span></span><br><span class="line">  <span class="comment">// -------------------------------</span></span><br><span class="line">  <span class="comment">// create style element</span></span><br><span class="line">  <span class="keyword">const</span> imageRollStyle = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">'style'</span>);</span><br><span class="line">  <span class="comment">// set animation time for all</span></span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">EPOCH_TIME</span> = <span class="number">64</span>;</span><br><span class="line">  <span class="comment">// set animation style for all</span></span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">ANIMATION_DEFAULT_SETTINGS</span> = <span class="string">"s linear infinite running "</span>;</span><br><span class="line">  <span class="comment">// set keyframes into style element</span></span><br><span class="line">  imageRollStyle.<span class="property">innerHTML</span> = <span class="string">`@keyframes image-roll {</span></span><br><span class="line"><span class="string">    0%  { left: 0; } 24% { left: 0; } 25% { left: -100%; } 49% { left: -100%; } 50% { left: -200%; }</span></span><br><span class="line"><span class="string">    74% { left: -200%; } 75% { left: -300%; } 99% { left: -300%; } 100%{ left: 0; }</span></span><br><span class="line"><span class="string">  }@keyframes image-translate-child-1 {</span></span><br><span class="line"><span class="string">    0%  { scale: 1; opacity: 0 } 2% { scale: 1; opacity: 1; } 23% { scale: 1.1; } 25%, 100% { scale: 1.1; opacity: 0; }</span></span><br><span class="line"><span class="string">  }#image-scroller&gt;div:nth-child(1) {</span></span><br><span class="line"><span class="string">    animation: <span class="subst">${EPOCH_TIME + ANIMATION_DEFAULT_SETTINGS}</span> image-translate-child-1;</span></span><br><span class="line"><span class="string">  }@keyframes image-translate-child-2 {</span></span><br><span class="line"><span class="string">    0%, 25%  { scale: 1; opacity: 0 } 27% { scale: 1; opacity: 1; } 48% { scale: 1.1; } 50%, 100% { scale: 1.1; opacity: 0; }</span></span><br><span class="line"><span class="string">  }#image-scroller&gt;div:nth-child(2) {</span></span><br><span class="line"><span class="string">    animation: <span class="subst">${EPOCH_TIME + ANIMATION_DEFAULT_SETTINGS}</span> image-translate-child-2;</span></span><br><span class="line"><span class="string">  }@keyframes image-translate-child-3 {</span></span><br><span class="line"><span class="string">    0%, 50%  { scale: 1; opacity: 0 } 52% { scale: 1; opacity: 1; } 73% { scale: 1.1; } 75%, 100% { scale: 1.1; opacity: 0; }</span></span><br><span class="line"><span class="string">  }#image-scroller&gt;div:nth-child(3) {</span></span><br><span class="line"><span class="string">    animation: <span class="subst">${EPOCH_TIME + ANIMATION_DEFAULT_SETTINGS}</span> image-translate-child-3;</span></span><br><span class="line"><span class="string">  }@keyframes image-translate-child-4 {</span></span><br><span class="line"><span class="string">    0%, 75%  { scale: 1; opacity: 0 } 77% { scale: 1; opacity: 1; } 98% { scale: 1.1; } 100% { scale: 1.1; opacity: 0; }</span></span><br><span class="line"><span class="string">  }#image-scroller&gt;div:nth-child(4) {</span></span><br><span class="line"><span class="string">    animation: <span class="subst">${EPOCH_TIME + ANIMATION_DEFAULT_SETTINGS}</span> image-translate-child-4;</span></span><br><span class="line"><span class="string">  }`</span>;</span><br><span class="line">  <span class="comment">// well done! now images can be rolling with fadeIn and fadeOut style, as well as scale 1.1x slowly</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将style样式存放到head标签</span></span><br><span class="line">  <span class="comment">// ----------------------</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">'head'</span>)[<span class="number">0</span>].<span class="title function_">appendChild</span>(imageRollStyle);</span><br><span class="line">  imageScroller.<span class="property">style</span>.<span class="property">animation</span> = <span class="string">`<span class="subst">${EPOCH_TIME + ANIMATION_DEFAULT_SETTINGS}</span> image-roll`</span>;</span><br><span class="line">  <span class="comment">// well done! keyframes in effect!</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// set background image url after rolling</span></span><br><span class="line">  <span class="comment">// --------------------------------------</span></span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> imgUrls = { <span class="string">'pc'</span>: [</span><br><span class="line">    <span class="string">'/race-miku.jpg'</span>, <span class="string">'/masuri-miku.jpg'</span>, <span class="string">'/planet-miku.jpg'</span>, <span class="string">'/4mikus.jpg'</span>, <span class="string">'/84672028_p0.jpg'</span>, <span class="string">'/84932457_p0.png'</span></span><br><span class="line">  ] }</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">readyState</span> === <span class="string">'complete'</span>) {</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'done'</span>);</span><br><span class="line">      <span class="keyword">let</span> imgChangeInterval = <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">let</span> imageChangeTimeOut = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'timeout'</span>);</span><br><span class="line">        <span class="keyword">if</span> (imgChangeInterval != <span class="literal">null</span>) {</span><br><span class="line">          <span class="built_in">clearInterval</span>(imgChangeInterval);</span><br><span class="line">          imgChangeInterval = <span class="literal">null</span>;</span><br><span class="line">        }</span><br><span class="line">        imgChangeInterval = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">          <span class="keyword">const</span> imageDivElement = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">"image-scroller"</span>).<span class="property">children</span>[count % <span class="number">4</span>];</span><br><span class="line">          <span class="keyword">let</span> sampleImg = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * imgUrls[<span class="variable constant_">DEVICES</span>[<span class="number">0</span>]].<span class="property">length</span>);</span><br><span class="line">          imageDivElement.<span class="property">innerHTML</span> = <span class="string">"&lt;img"</span> +</span><br><span class="line">            <span class="string">" src='"</span> + <span class="variable constant_">BASE_URL</span> + <span class="variable constant_">DEVICES</span>[<span class="number">0</span>] + imgUrls[<span class="variable constant_">DEVICES</span>[<span class="number">0</span>]][sampleImg] + <span class="string">"'"</span> +</span><br><span class="line">            <span class="string">" style='width: 100%; height: 100%;'"</span> +</span><br><span class="line">            <span class="string">" alt='network broken?' /&gt;"</span>;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`changed, now is <span class="subst">${count % <span class="number">4</span>}</span> and <span class="subst">${imgUrls[DEVICES[<span class="number">0</span>]][sampleImg]}</span>`</span>) <span class="comment">// no</span></span><br><span class="line">          ++count;</span><br><span class="line">          <span class="comment">// 如果你需要在这里增加一个限制的话</span></span><br><span class="line">          <span class="comment">// count = count === 4 ? 0 : count;</span></span><br><span class="line">          <span class="comment">// 那么你可以将上面的[count % 4]修改为[count]</span></span><br><span class="line">          <span class="comment">// 虽然改或者不改都无所谓，但主要是不改的话下一个看你代码的人会看不懂。</span></span><br><span class="line">        }, <span class="number">64000</span> / <span class="number">4</span>); <span class="comment">// 这里是因为上一篇设置固定时间为64s，所以是一共64000ms</span></span><br><span class="line">        <span class="comment">// 4张图片一轮，每张图片更新时间为64000 / 4</span></span><br><span class="line">        <span class="built_in">clearTimeout</span>(imageChangeTimeOut);</span><br><span class="line">      }, <span class="number">2000</span>);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="comment">// well done! now images can be updated!</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p>到这里，动态修改、动态显示的背景图片就实现了。</p>
]]></content>
      <categories>
        <category>customize</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>customize</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo设置少量固定的动态背景图</title>
    <url>/2023/12/25/custom/background-dynamic/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在<a href="/2023/12/21/custom/background/">以前的这篇文章</a>中，我们探讨了如何在<code>body</code>上设置静态背景。</p>
<p>由于动态背景的示意图制作成本稍高，暂时以文字描述替代。后续将根据实际情况安排动态示意图的展示。</p>
<span id="more"></span>

<h1 id="先准备素材"><a href="#先准备素材" class="headerlink" title="先准备素材"></a>先准备素材</h1><p>还是老样子，准备四张照片，然后压缩。这是我找到的四张照片：</p>
<p><img data-src="http://images.sakebow.cn/bgimage/pc/4mikus.jpg" alt="1号背景图片"></p>
<p><img data-src="http://images.sakebow.cn/bgimage/pc/masuri-miku.jpg" alt="2号背景图片"></p>
<p><img data-src="http://images.sakebow.cn/bgimage/pc/planet-miku.jpg" alt="3号背景图片"></p>
<p><img data-src="http://images.sakebow.cn/bgimage/pc/race-miku.jpg" alt="4号背景图片"></p>
<p>当然，这些都是通过<a href="https://www.iloveimg.com/zh-cn/compress-image/compress-jpg">iloveImg</a>压缩掉了，每张图片大概<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="7.122ex" height="1.595ex" role="img" focusable="false" viewBox="0 -683 3148 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g><g data-mml-node="mi" transform="translate(1500,0)"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g><g data-mml-node="mi" transform="translate(2389,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g></g></g></svg></mjx-container>到<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="7.122ex" height="1.595ex" role="img" focusable="false" viewBox="0 -683 3148 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g><g data-mml-node="mi" transform="translate(1500,0)"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g><g data-mml-node="mi" transform="translate(2389,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g></g></g></svg></mjx-container>不等。</p>
<p>用这些图片我们先做一个有限的轮播效果。</p>
<h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>我们现在先选用<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.532ex" role="img" focusable="false" viewBox="0 -677 500 677"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g></svg></mjx-container>个<code>div</code>元素进行基本的轮播实现。</p>
<blockquote>
<p>为什么是<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.532ex" role="img" focusable="false" viewBox="0 -677 500 677"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g></svg></mjx-container>个呢？</p>
<p>如果是<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.507ex" role="img" focusable="false" viewBox="0 -666 500 666"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></svg></mjx-container>个轮播的话，容错很低，如果有一个较大的图片，加载可能会出现闪回。这个在<a href="https://blog.csdn.net/ordinary_brony/article/details/108025636">Hexo设置背景图片轮播效果</a>已经得到了证实。</p>
<p>如果是<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.554ex" role="img" focusable="false" viewBox="0 -665 500 687"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></svg></mjx-container>个轮播的话，很难计算。因为有很多3无法整除的情况，可能会出现因为时间精确度不够产生的闪回。</p>
<p><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.532ex" role="img" focusable="false" viewBox="0 -677 500 677"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g></svg></mjx-container>个的话，目前而言容错稍高。当然我并没有测试出极端情况，只是比较稳妥的是<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.532ex" role="img" focusable="false" viewBox="0 -677 500 677"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g></svg></mjx-container>张轮播。</p>
</blockquote>
<p>具体而言，轮播又要如何做呢？</p>
<p>之前我们已经提到，单纯使用<code>body</code>的<code>background</code>属性设置遮罩与背景图片已经不足够了。最大的问题就是<code>linear-gradient</code>在关键帧之间没有渐变的过程。</p>
<p>所以我们最后还是返璞归真，使用培训班经常教的拉图像框的形式。</p>
<p>简单描述的话，就是有一个占满整个屏幕的<code>div</code>作为可视框图。为了方便描述，我们将他记为<code>carousel-frame</code>。<code>carousel-frame</code>的长度宽度都是浏览器的<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.394ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 1500 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g></g></g></svg></mjx-container>，并且位置是固定在浏览器中的，并不随着滚轮的移动而移动。</p>
<p>然后呢，我们用上一个长度超出<code>carousel-frame</code><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.532ex" role="img" focusable="false" viewBox="0 -677 500 677"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g></svg></mjx-container>倍的<code>div</code>，叫做<code>carousel-banner</code>。<code>carousel-banner</code>在<code>carousel-frame</code>的里面，或者并行也可以。因为<code>carousel-frame</code>已经占满了一整个屏幕，剩下的内容其实看不见的。</p>
<p>正因为<code>carousel-banner</code>一共超出了<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.532ex" role="img" focusable="false" viewBox="0 -677 500 677"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g></svg></mjx-container>倍，所以可以放下<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.532ex" role="img" focusable="false" viewBox="0 -677 500 677"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g></svg></mjx-container>张浏览器可视页面大小的图片作为我们当前显示的背景图。</p>
<p>我们通过控制<code>carousel-banner</code>的左边界位置来控制当前图片显示。</p>
<p>这种思想其实很多地方都能够看到，因为这样的话就只需要加载一张图片，然后所有需要图片的元素访问这个图片的一个部分就可以了。</p>
<p>最后呢，为了让背景图片看起来不那么像广告那种轮播图一样单调，我们还是把控制左边界的过程省略掉，通过不透明度的设置屏蔽掉。这样就好了。</p>
<p>那么CSS大概又如何设计动画呢？</p>
<p>我们就简单用流程图展示一下：</p>
<pre class="mermaid">graph LR
    A[第一张图片]--25%--&gt;B[第二张图片]--25%--&gt;C[第三张图片]--25%--&gt;D[第四张图片]--25%--&gt;A</pre>

<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>好了，废话也说了这么多了，也该<code>show me the code</code>了。</p>
<p>为了保证绝对的速度，我们直接使用原生<code>JavaScript</code>创建这些内容。一方面是使得在<code>readyState</code>为<code>loading</code>的时候就直接加载所有内容，另一方面也是因为<code>CSS</code>与<code>JS</code>两种文件的加载都会稍有误差，在网速较快的时候表现并不明显，但是图片较大或者网速较慢都会产生很尴尬的时间错位，然后图片就会闪回。这可是很难看的。</p>
<h2 id="逻辑写在哪"><a href="#逻辑写在哪" class="headerlink" title="逻辑写在哪"></a>逻辑写在哪</h2><p>我们在<code>source/js/utils.js</code>文件中，找到这么一段：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">readyState</span> === <span class="string">'loading'</span>) {</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">'readystatechange'</span>, onPageLoaded, { <span class="attr">once</span>: <span class="literal">true</span> });</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">  <span class="title function_">onPageLoaded</span>();</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p>我们来添加一个函数，变成这样：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">readyState</span> === <span class="string">'loading'</span>) {</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">'readystatechange'</span>, onPageLoaded, { <span class="attr">once</span>: <span class="literal">true</span> });</span><br><span class="line">  <span class="title function_">addBackgroundImageDiv</span>();</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">  <span class="title function_">onPageLoaded</span>();</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p>这个函数的具体定义就可以直接写在下面：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addBackgroundImageDiv</span> () { }</span><br></pre></td></tr></table></figure>

<p>当然，你会注意到下面还有一个定义：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">NexT</span>.<span class="property">utils</span> = {</span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p>如果写在里面，所有的函数将无法识别。并不清楚其中的缘由。</p>
<p>总之，放在<code>utils.js</code>中的话，就不需要在模板文件中引入<code>script</code>标签了，也不用在意打包之后的路径该怎么办了。</p>
<h2 id="先搭建基本框架"><a href="#先搭建基本框架" class="headerlink" title="先搭建基本框架"></a>先搭建基本框架</h2><p>对于我们的思路呢，我们就一步步开始实现。我们先创建<code>DOM</code>元素：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// create dom element for background images</span></span><br><span class="line"><span class="comment">// ----------------------------------------</span></span><br><span class="line"><span class="keyword">const</span> opacityMask = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">"div"</span>);</span><br><span class="line">opacityMask.<span class="property">style</span>.<span class="property">background</span> = <span class="string">"linear-gradient(#fff, #ffced9, #fff)"</span>;</span><br><span class="line">opacityMask.<span class="property">style</span>.<span class="property">position</span> = <span class="string">"fixed"</span>;</span><br><span class="line">opacityMask.<span class="property">style</span>.<span class="property">top</span> = <span class="string">"0"</span>;</span><br><span class="line">opacityMask.<span class="property">style</span>.<span class="property">left</span> = <span class="string">"0"</span>;</span><br><span class="line">opacityMask.<span class="property">style</span>.<span class="property">content</span> = <span class="string">""</span>;</span><br><span class="line">opacityMask.<span class="property">style</span>.<span class="property">width</span> = <span class="string">"100%"</span>;</span><br><span class="line">opacityMask.<span class="property">style</span>.<span class="property">height</span> = <span class="string">"100%"</span>;</span><br><span class="line">opacityMask.<span class="property">style</span>.<span class="property">opacity</span> = <span class="string">"0.8"</span>;</span><br><span class="line">opacityMask.<span class="property">style</span>.<span class="property">zIndex</span> = <span class="string">"-1"</span>;</span><br><span class="line"><span class="keyword">const</span> imageContainer = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">"div"</span>);</span><br><span class="line">imageContainer.<span class="property">style</span>.<span class="property">position</span> = <span class="string">"fixed"</span>;</span><br><span class="line">imageContainer.<span class="property">style</span>.<span class="property">top</span> = <span class="string">"0"</span>;</span><br><span class="line">imageContainer.<span class="property">style</span>.<span class="property">left</span> = <span class="string">"0"</span>;</span><br><span class="line">imageContainer.<span class="property">style</span>.<span class="property">content</span> = <span class="string">""</span>;</span><br><span class="line">imageContainer.<span class="property">style</span>.<span class="property">width</span> = <span class="string">"100%"</span>;</span><br><span class="line">imageContainer.<span class="property">style</span>.<span class="property">height</span> = <span class="string">"100%"</span>;</span><br><span class="line">imageContainer.<span class="property">style</span>.<span class="property">zIndex</span> = <span class="string">"-2"</span>;</span><br><span class="line"><span class="keyword">const</span> imageScroller = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">"div"</span>);</span><br><span class="line">imageScroller.<span class="property">id</span> = <span class="string">"image-scroller"</span>;</span><br><span class="line">imageScroller.<span class="property">style</span>.<span class="property">position</span> = <span class="string">"fixed"</span>;</span><br><span class="line">imageScroller.<span class="property">style</span>.<span class="property">top</span> = <span class="string">"0"</span>;</span><br><span class="line">imageScroller.<span class="property">style</span>.<span class="property">left</span> = <span class="string">"0"</span>;</span><br><span class="line">imageScroller.<span class="property">style</span>.<span class="property">content</span> = <span class="string">""</span>;</span><br><span class="line">imageScroller.<span class="property">style</span>.<span class="property">width</span> = <span class="string">"400%"</span>;</span><br><span class="line">imageScroller.<span class="property">style</span>.<span class="property">height</span> = <span class="string">"100%"</span>;</span><br><span class="line">imageScroller.<span class="property">style</span>.<span class="property">display</span> = <span class="string">"flex"</span>;</span><br><span class="line">imageContainer.<span class="property">style</span>.<span class="property">justifyContent</span> = <span class="string">"space-around"</span>;</span><br><span class="line">imageContainer.<span class="property">style</span>.<span class="property">alignContent</span> = <span class="string">"center"</span>;</span><br><span class="line">imageContainer.<span class="property">style</span>.<span class="property">alignItems</span> = <span class="string">"center"</span>;</span><br><span class="line">imageScroller.<span class="property">style</span>.<span class="property">zIndex</span> = <span class="string">"-3"</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(opacityMask);</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(imageContainer);</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(imageScroller);</span><br><span class="line"><span class="comment">// well done! basic frames established!</span></span><br></pre></td></tr></table></figure>

<p>当然，你也一定能找到更简单的写法。我这一步步操作过来只是单纯为了逻辑清晰。</p>
<h2 id="然后添加图片链接"><a href="#然后添加图片链接" class="headerlink" title="然后添加图片链接"></a>然后添加图片链接</h2><p>然后，我们再将图片放进去：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// url for background images</span></span><br><span class="line"><span class="comment">// -------------------------</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">BASE_URL</span> = <span class="string">'http://images.sakebow.cn/bgimage/'</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DEVICES</span> = [<span class="string">'pc'</span>]</span><br><span class="line"><span class="keyword">const</span> imgWindowUrl = { <span class="string">'pc'</span>: [</span><br><span class="line">  <span class="string">'/race-miku.jpg'</span>, <span class="string">'/masuri-miku.jpg'</span>, <span class="string">'/planet-miku.jpg'</span>, <span class="string">'/4mikus.jpg'</span></span><br><span class="line">] };</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> imgUrlItem <span class="keyword">of</span> imgWindowUrl[<span class="string">'pc'</span>]) {</span><br><span class="line">  <span class="keyword">const</span> imageFrameItemContainer = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">"div"</span>);</span><br><span class="line">  imageFrameItemContainer.<span class="property">style</span>.<span class="property">width</span> = imageContainer.<span class="property">style</span>.<span class="property">width</span>;</span><br><span class="line">  imageFrameItemContainer.<span class="property">style</span>.<span class="property">height</span> = <span class="string">"100%"</span>;</span><br><span class="line">  imageFrameItemContainer.<span class="property">innerHTML</span> = <span class="string">"&lt;img"</span> +</span><br><span class="line">    <span class="string">" src='"</span> + <span class="variable constant_">BASE_URL</span> + <span class="variable constant_">DEVICES</span>[<span class="number">0</span>] + imgUrlItem + <span class="string">"'"</span> +</span><br><span class="line">    <span class="string">" style='width: 100%; height: 100%;'"</span> +</span><br><span class="line">    <span class="string">" alt='network broken?' /&gt;"</span>;</span><br><span class="line">  imageScroller.<span class="title function_">appendChild</span>(imageFrameItemContainer);</span><br><span class="line">}</span><br><span class="line"><span class="comment">// well done! all images ready!</span></span><br></pre></td></tr></table></figure>

<p>在这里你能看到我的一些没必要的设计，这些其实是我为了以后做拓展用的。当然也不一定会做就是了。（诶嘿~⭐）</p>
<h2 id="动画效果"><a href="#动画效果" class="headerlink" title="动画效果"></a>动画效果</h2><p>在搭建了框架、设置了图片链接后，我们就可以准备开始轮播的操作了。</p>
<p>当然，你可能会想到再去<code>style.styl</code>文件中写一些<code>css</code>。但很可惜的是，别忘了，我们可是在<code>loading</code>状态下，所有的内容都是不可用的。</p>
<p>于是，就连动画效果我们也要创建<code>style</code>标签并编辑动画效果：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// keyframe to roll images</span></span><br><span class="line"><span class="comment">// -------------------------------</span></span><br><span class="line"><span class="comment">// create style element</span></span><br><span class="line"><span class="keyword">const</span> imageRollStyle = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">'style'</span>);</span><br><span class="line"><span class="comment">// set animation time for all</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">EPOCH_TIME</span> = <span class="string">"64s "</span>;</span><br><span class="line"><span class="comment">// set animation style for all</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">ANIMATION_DEFAULT_SETTINGS</span> = <span class="string">"linear infinite both running "</span>;</span><br><span class="line"><span class="comment">// set keyframes into style element</span></span><br><span class="line">imageRollStyle.<span class="property">innerHTML</span> = <span class="string">`@keyframes image-roll {</span></span><br><span class="line"><span class="string">  0%  { left: 0; } 24% { left: 0; } 25% { left: -100%; } 49% { left: -100%; } 50% { left: -200%; }</span></span><br><span class="line"><span class="string">  74% { left: -200%; } 75% { left: -300%; } 99% { left: -300%; } 100%{ left: 0; }</span></span><br><span class="line"><span class="string">}@keyframes image-translate-child-1 {</span></span><br><span class="line"><span class="string">  0%  { scale: 1; opacity: 0 } 2% { scale: 1; opacity: 1; } 23% { scale: 1.1; } 25%, 100% { scale: 1.1; opacity: 0; }</span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"><span class="string">#image-scroller&gt;div:nth-child(1) {</span></span><br><span class="line"><span class="string">  animation: <span class="subst">${EPOCH_TIME + ANIMATION_DEFAULT_SETTINGS}</span> image-translate-child-1;</span></span><br><span class="line"><span class="string">}@keyframes image-translate-child-2 {</span></span><br><span class="line"><span class="string">  0%, 25%  { scale: 1; opacity: 0 } 27% { scale: 1; opacity: 1; } 48% { scale: 1.1; } 50%, 100% { scale: 1.1; opacity: 0; }</span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"><span class="string">#image-scroller&gt;div:nth-child(2) {</span></span><br><span class="line"><span class="string">  animation: <span class="subst">${EPOCH_TIME + ANIMATION_DEFAULT_SETTINGS}</span> image-translate-child-2;</span></span><br><span class="line"><span class="string">}@keyframes image-translate-child-3 {</span></span><br><span class="line"><span class="string">  0%, 50%  { scale: 1; opacity: 0 } 52% { scale: 1; opacity: 1; } 73% { scale: 1.1; } 75%, 100% { scale: 1.1; opacity: 0; }</span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"><span class="string">#image-scroller&gt;div:nth-child(3) {</span></span><br><span class="line"><span class="string">  animation: <span class="subst">${EPOCH_TIME + ANIMATION_DEFAULT_SETTINGS}</span> image-translate-child-3;</span></span><br><span class="line"><span class="string">}@keyframes image-translate-child-4 {</span></span><br><span class="line"><span class="string">  0%, 75%  { scale: 1; opacity: 0 } 77% { scale: 1; opacity: 1; } 98% { scale: 1.1; } 100% { scale: 1.1; opacity: 0; }</span></span><br><span class="line"><span class="string">}</span></span><br><span class="line"><span class="string">#image-scroller&gt;div:nth-child(4) {</span></span><br><span class="line"><span class="string">  animation: <span class="subst">${EPOCH_TIME + ANIMATION_DEFAULT_SETTINGS}</span> image-translate-child-4;</span></span><br><span class="line"><span class="string">}`</span>;</span><br><span class="line"><span class="comment">// well done! now images can be rolling with fadeIn and fadeOut style, as well as scale 1.1x slowly</span></span><br></pre></td></tr></table></figure>

<p>如果需要稳妥的话，也需要在<code>keyframes</code>的基础上额外增加一些适配，比如<code>-moz-keyframes</code>、<code>-webkit-keyframes</code>等等诸如此类的玩意儿。</p>
<p>在这里就不多说了，如果加上的话这个教程就没完没了了。</p>
<p>最后，我们让<code>style</code>标签加入页面中去：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将style样式存放到head标签</span></span><br><span class="line"><span class="comment">// ----------------------</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">'head'</span>)[<span class="number">0</span>].<span class="title function_">appendChild</span>(imageRollStyle);</span><br><span class="line">imageScroller.<span class="property">style</span>.<span class="property">animation</span> = <span class="string">`<span class="subst">${EPOCH_TIME + ANIMATION_DEFAULT_SETTINGS}</span> image-roll`</span>;</span><br><span class="line"><span class="comment">// well done! keyframes in effect!</span></span><br></pre></td></tr></table></figure>

<p>看起来一切都可行了！</p>
<p>不出意外的话，这些就够出现效果了。</p>
]]></content>
      <categories>
        <category>customize</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>customize</tag>
      </tags>
  </entry>
  <entry>
    <title>NexT8中使用MathJax编辑数学表达式</title>
    <url>/2023/12/20/custom/mathjax/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>数学表达式虽然是一个小功能，但是在很多情况下都有很不错的使用场景。在这里我将展示如何使用。</p>
<span id="more"></span>

<h1 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h1><p>在开始之前，我们需要准备一些插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm isntall hexo-filter-mathjax --save</span><br><span class="line">$ npm install hexo-math --save</span><br></pre></td></tr></table></figure>

<p>然后，我们需要在<code>NexT_config</code>文件中找到<code>math</code>选项，再加一点小小的修改：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">math:</span></span><br><span class="line">  <span class="attr">every_page:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">mathjax:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="string">none</span></span><br></pre></td></tr></table></figure>

<p>这样就能使用了。</p>
<p>为了节省渲染时间，我将<code>every_page</code>设为<code>false</code>，目的是别全部渲染，而是需要在需要渲染的文章最上方加入一行标识：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: NexT8中使用MathJax编辑数学表达式</span><br><span class="line">mathjax: true</span><br><span class="line"><span class="section">date: 2023-12-20 14:30:00</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<p>这样，就能够单独渲染这篇文章了。</p>
<h1 id="看看效果"><a href="#看看效果" class="headerlink" title="看看效果"></a>看看效果</h1><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.819ex;" xmlns="http://www.w3.org/2000/svg" width="15.539ex" height="6.354ex" role="img" focusable="false" viewBox="0 -1562.5 6868.4 2808.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="munder"><g data-mml-node="mo" transform="translate(38.1,0)"><path data-c="6C" d="M42 46H56Q95 46 103 60V68Q103 77 103 91T103 124T104 167T104 217T104 272T104 329Q104 366 104 407T104 482T104 542T103 586T103 603Q100 622 89 628T44 637H26V660Q26 683 28 683L38 684Q48 685 67 686T104 688Q121 689 141 690T171 693T182 694H185V379Q185 62 186 60Q190 52 198 49Q219 46 247 46H263V0H255L232 1Q209 2 183 2T145 3T107 3T57 1L34 0H26V46H42Z"></path><path data-c="69" d="M69 609Q69 637 87 653T131 669Q154 667 171 652T188 609Q188 579 171 564T129 549Q104 549 87 564T69 609ZM247 0Q232 3 143 3Q132 3 106 3T56 1L34 0H26V46H42Q70 46 91 49Q100 53 102 60T104 102V205V293Q104 345 102 359T88 378Q74 385 41 385H30V408Q30 431 32 431L42 432Q52 433 70 434T106 436Q123 437 142 438T171 441T182 442H185V62Q190 52 197 50T232 46H255V0H247Z" transform="translate(278,0)"></path><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z" transform="translate(556,0)"></path></g><g data-mml-node="TeXAtom" transform="translate(0,-637.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(572,0)"><g data-mml-node="mo"><path data-c="2192" d="M56 237T56 250T70 270H835Q719 357 692 493Q692 494 692 496T691 499Q691 511 708 511H711Q720 511 723 510T729 506T732 497T735 481T743 456Q765 389 816 336T935 261Q944 258 944 250Q944 244 939 241T915 231T877 212Q836 186 806 152T761 85T740 35T732 4Q730 -6 727 -8T711 -11Q691 -11 691 0Q691 7 696 25Q728 151 835 230H70Q56 237 56 250Z"></path></g></g><g data-mml-node="mn" transform="translate(1572,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g><g data-mml-node="msup" transform="translate(1631.8,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(499,413) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g><g data-mml-node="mo" transform="translate(2863,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="munderover" transform="translate(3918.8,0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(148.2,-1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g><g data-mml-node="mi" transform="translate(509.9,1150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mfrac" transform="translate(5529.5,0)"><g data-mml-node="msup" transform="translate(220,676)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(605,363) scale(0.707)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mrow" transform="translate(358,-686)"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345,0)"><path data-c="21" d="M78 661Q78 682 96 699T138 716T180 700T199 661Q199 654 179 432T158 206Q156 198 139 198Q121 198 119 206Q118 209 98 431T78 661ZM79 61Q79 89 97 105T141 121Q164 119 181 104T198 61Q198 31 181 16T139 1Q114 1 97 16T79 61Z"></path></g></g><rect width="1099" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></p>
<p>看起来不错。</p>
]]></content>
      <categories>
        <category>customize</category>
      </categories>
      <tags>
        <tag>customize</tag>
        <tag>mathjax</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo自定义静态背景</title>
    <url>/2023/12/21/custom/background/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>虽然我知道你很想设置炫酷的动态背景。但先别急，我们一步步实现，现在先将静态的内容实现了。</p>
<span id="more"></span>

<h1 id="准备素材"><a href="#准备素材" class="headerlink" title="准备素材"></a>准备素材</h1><p>我们先准备一张希望放在博客上的图片：</p>
<p><img data-src="http://images.sakebow.cn/custom/background/84049481_p0.jpg" alt="2020夏日祭初音"></p>
<p>哦不，等下，这个会不会有些太大了？<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="6.4ex" height="1.595ex" role="img" focusable="false" viewBox="0 -683 2829 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(778,0)"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(1278,0)"></path></g><g data-mml-node="mi" transform="translate(1778,0)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g></g></g></svg></mjx-container>,加载起来会很费力的哦。</p>
<p>那我们再想想办法。目前有一个网站叫做<a href="https://www.iloveimg.com/zh-cn/compress-image/compress-jpg">iloveImg</a>，是能够节省大约<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.579ex" role="img" focusable="false" viewBox="0 -676 1000 698"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container>的存储空间。</p>
<p>唯一美中不足的是，国内基本是<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0;" xmlns="http://www.w3.org/2000/svg" width="4.86ex" height="1.545ex" role="img" focusable="false" viewBox="0 -683 2148 683"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g><g data-mml-node="mi" transform="translate(1389,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g></g></g></svg></mjx-container>左右的速度，而搭上梯子能够达到<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="7.122ex" height="1.595ex" role="img" focusable="false" viewBox="0 -683 3148 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g><g data-mml-node="mi" transform="translate(1500,0)"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g><g data-mml-node="mi" transform="translate(2389,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g></g></g></svg></mjx-container>。当然，这是<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="5.771ex" height="1.595ex" role="img" focusable="false" viewBox="0 -683 2551 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g><g data-mml-node="mi" transform="translate(1500,0)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g></g></g></svg></mjx-container><code>WIFI</code>的速度，千兆网线能更快。</p>
<p>于是呢，我们就拿到了这张图片：</p>
<p><img data-src="http://images.sakebow.cn/custom/background/masuri-miku.jpg" alt="2020夏日祭初音（压缩版）"></p>
<p>压到了<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="7.122ex" height="1.595ex" role="img" focusable="false" viewBox="0 -683 3148 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(500,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(1000,0)"></path></g><g data-mml-node="mi" transform="translate(1500,0)"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g><g data-mml-node="mi" transform="translate(2389,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g></g></g></svg></mjx-container>，相对于好几兆的照片还是很节省空间的。</p>
<h1 id="创建样式表"><a href="#创建样式表" class="headerlink" title="创建样式表"></a>创建样式表</h1><p>然后，我们就准备加入一些样式。</p>
<h2 id="样式表存储位置"><a href="#样式表存储位置" class="headerlink" title="样式表存储位置"></a>样式表存储位置</h2><p>加在哪里呢？<code>NexT</code>主题中提供了配置项：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Define custom file paths.</span></span><br><span class="line"><span class="comment"># Create your custom files in site directory `source/_data` and uncomment needed files below.</span></span><br><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.njk</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.njk</span></span><br><span class="line">  <span class="comment">#sidebar: source/_data/sidebar.njk</span></span><br><span class="line">  <span class="comment">#postMeta: source/_data/post-meta.njk</span></span><br><span class="line">  <span class="comment">#postBodyStart: source/_data/post-body-start.njk</span></span><br><span class="line">  <span class="comment">#postBodyEnd: source/_data/post-body-end.njk</span></span><br><span class="line">  <span class="comment">#footer: source/_data/footer.njk</span></span><br><span class="line">  <span class="comment">#bodyEnd: source/_data/body-end.njk</span></span><br><span class="line">  <span class="comment">#variable: source/_data/variables.styl</span></span><br><span class="line">  <span class="comment">#mixin: source/_data/mixins.styl</span></span><br><span class="line">  <span class="comment">#style: source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>

<p>我们需要将其中的</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#style: source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>

<p>解开注释，变成这样：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Define custom file paths.</span></span><br><span class="line"><span class="comment"># Create your custom files in site directory `source/_data` and uncomment needed files below.</span></span><br><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.njk</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.njk</span></span><br><span class="line">  <span class="comment">#sidebar: source/_data/sidebar.njk</span></span><br><span class="line">  <span class="comment">#postMeta: source/_data/post-meta.njk</span></span><br><span class="line">  <span class="comment">#postBodyStart: source/_data/post-body-start.njk</span></span><br><span class="line">  <span class="comment">#postBodyEnd: source/_data/post-body-end.njk</span></span><br><span class="line">  <span class="comment">#footer: source/_data/footer.njk</span></span><br><span class="line">  <span class="comment">#bodyEnd: source/_data/body-end.njk</span></span><br><span class="line">  <span class="comment">#variable: source/_data/variables.styl</span></span><br><span class="line">  <span class="comment">#mixin: source/_data/mixins.styl</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>

<p>这就相当于给定了引入样式表的文件路径。</p>
<p>需要注意的是，这个路径并不是<code>themes/next/source</code>文件夹，而是根目录下存放<code>_post</code>的<code>source</code>文件夹。</p>
<p>于是按照路径创建这样一个样式表，里面的内容就会生效。</p>
<p>需要注意的是，与前几个<code>NexT</code>版本不一样的是，<code>NexT</code>的第<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 500 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g></g></g></svg></mjx-container>代，也就是现在我正在使用的版本，将需要如上述内容进行显式配置才能生效。</p>
<p>而<code>NexT</code>的第<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.579ex" role="img" focusable="false" viewBox="0 -676 500 698"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"></path></g></g></g></svg></mjx-container>代乃至以前的版本，只需要在<code>themes/next/source/css</code>文件夹下就能够被打包，所以也不需要额外在意如何引用这些样式表。</p>
<h2 id="设置背景图片"><a href="#设置背景图片" class="headerlink" title="设置背景图片"></a>设置背景图片</h2><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> {</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(http://images.sakebow.cn/masuri-miku.jpg);</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p>于是你的<code>body</code>上就出现了一张相当明显的背景图。</p>
<p><img data-src="http://images.sakebow.cn/custom/background/%E6%9C%80%E5%88%9D%E7%9A%84%E6%95%88%E6%9E%9C.png" alt="添加背景图的效果"></p>
<p>但是你发现，当我随着我的阅读进度往下划的过程中，背景图片就慢慢地消失了。</p>
<p><img data-src="http://images.sakebow.cn/custom/background/%E6%9C%80%E5%88%9D%E7%9A%84%E6%95%88%E6%9E%9C%E6%9C%89%E7%82%B9%E9%97%AE%E9%A2%98.png" alt="滚动将会出现问题"></p>
<h2 id="设置背景图片不会随着滚轮移动"><a href="#设置背景图片不会随着滚轮移动" class="headerlink" title="设置背景图片不会随着滚轮移动"></a>设置背景图片不会随着滚轮移动</h2><p>这可不是我们希望看到的。于是增加了一个属性：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> {</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(http://images.sakebow.cn/masuri-miku.jpg);</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">  <span class="attribute">background-attachment</span>: fixed; <span class="comment">// 让图片不随着滑轮移动</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p><img data-src="http://images.sakebow.cn/custom/background/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BF%AE%E6%94%B9.png" alt="背景图片不会被移走"></p>
<p>看着效果还不错。</p>
<h2 id="设置背景图片透明度"><a href="#设置背景图片透明度" class="headerlink" title="设置背景图片透明度"></a>设置背景图片透明度</h2><p>当然，你觉得这样看起来太<code>low</code>了。 我们加点高级的，加点透明度。</p>
<h3 id="opacity可不能随便用"><a href="#opacity可不能随便用" class="headerlink" title="opacity可不能随便用"></a>opacity可不能随便用</h3><p>你可能觉得，就是<code>opacity</code>（不透明度）了，对吧？</p>
<p>不过大家应该知道一个常识：<code>opacity</code>是一定会继承的。一旦父<code>DOM</code>定义了<code>opacity</code>，子<code>DOM</code>就一定会收到父<code>DOM</code>的不透明度属性，并且子<code>DOM</code>的<code>opacity</code>属性是定义的子<code>DOM</code>自身定义值与从父<code>DOM</code>继承下来的属性值相乘的结果。</p>
<p>例如，我们有一个父<code>DOM</code>叫做<code>ul</code>，<code>opacity</code>值为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="2.891ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 1278 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(778,0)"></path></g></g></g></svg></mjx-container>；其中的子<code>DOM</code>叫做<code>li</code>，<code>opacity</code>值为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="2.891ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 1278 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(778,0)"></path></g></g></g></svg></mjx-container>，最终<code>li</code>的实际<code>opacity</code>值将为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="13.451ex" height="1.717ex" role="img" focusable="false" viewBox="0 -677 5945.6 759"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(778,0)"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1278,0)"><g data-mml-node="mo"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g></g><g data-mml-node="mn" transform="translate(2056,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(778,0)"></path></g><g data-mml-node="mo" transform="translate(3611.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(4667.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(778,0)"></path></g></g></g></svg></mjx-container>。</p>
<p>并且还有一个致命的问题：<code>opacity</code>会将<code>DOM</code>中的内容一并透明化，整个就看不太清了。</p>
<p><img data-src="http://images.sakebow.cn/custom/background/opacity%E5%AF%BC%E8%87%B4%E4%BB%80%E4%B9%88%E9%83%BD%E7%9C%8B%E4%B8%8D%E6%B8%85%E4%BA%86.png" alt="都看不太清了"></p>
<p>虽然说背景图片看得更清楚了，但是文章可就一点都看不到了啊！</p>
<h3 id="让你意想不到的linear-gradient"><a href="#让你意想不到的linear-gradient" class="headerlink" title="让你意想不到的linear-gradient"></a>让你意想不到的linear-gradient</h3><p>有什么办法呢？用<code>linear-gradient</code>。没错，用<code>linear-gradient</code>。</p>
<p>它本身其实就是个创建线性渐变的工具，但我们似乎都忘了，<code>gradient</code>本质上是一种特殊的图像，如果按<strong>层叠样式表</strong>的定义去理解的话，可以理解为一种<strong>遮罩</strong>。</p>
<p>也就是说，只要我设置<code>linear-gradient</code>的不透明度为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="3.394ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 1500 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g></g></g></svg></mjx-container>，那图片就不可见；如果不透明度设置为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 500 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container>，那图片就完全可见。</p>
<p>所以，我们就直接这样设置：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> {</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">245</span>, <span class="number">246</span>, <span class="number">1</span>), <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">245</span>, <span class="number">246</span>, .<span class="number">85</span>), <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">245</span>, <span class="number">246</span>, <span class="number">1</span>)), <span class="built_in">url</span>(http://images.sakebow.cn/background/masuri-miku.jpg) no-repeat <span class="number">0%</span> <span class="number">100%</span>/ cover;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-moz-linear-gradient</span>(<span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">245</span>, <span class="number">246</span>, <span class="number">1</span>), <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">245</span>, <span class="number">246</span>, .<span class="number">85</span>), <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">245</span>, <span class="number">246</span>, <span class="number">1</span>)), <span class="built_in">url</span>(http://images.sakebow.cn/background/masuri-miku.jpg) no-repeat <span class="number">0%</span> <span class="number">100%</span>/ cover;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(<span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">245</span>, <span class="number">246</span>, <span class="number">1</span>), <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">245</span>, <span class="number">246</span>, .<span class="number">85</span>), <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">245</span>, <span class="number">246</span>, <span class="number">1</span>)), <span class="built_in">url</span>(http://images.sakebow.cn/background/masuri-miku.jpg) no-repeat <span class="number">0%</span> <span class="number">100%</span>/ cover;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-o-linear-gradient</span>(<span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">245</span>, <span class="number">246</span>, <span class="number">1</span>), <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">245</span>, <span class="number">246</span>, .<span class="number">85</span>), <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">245</span>, <span class="number">246</span>, <span class="number">1</span>)), <span class="built_in">url</span>(http://images.sakebow.cn/background/masuri-miku.jpg) no-repeat <span class="number">0%</span> <span class="number">100%</span>/ cover;</span><br><span class="line">  <span class="attribute">background-attachment</span>: fixed;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>

<p>于是我们就得到了一个最上、最下不可见且中间有<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="2.262ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 1000 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container>透明度的背景图片。</p>
<p><img data-src="http://images.sakebow.cn/custom/background/%E9%9D%99%E6%80%81%E9%80%8F%E6%98%8E%E5%BA%A6%E8%83%8C%E6%99%AF.png" alt="距离我们想要的效果非常接近了"></p>
<p>似乎还不错。</p>
<h1 id="背景图片专项优化"><a href="#背景图片专项优化" class="headerlink" title="背景图片专项优化"></a>背景图片专项优化</h1><p>既然背景图片都这么优化了，我们是否应该将所有的板块全部透明化一点？不然的话，我们中意的背景就被大部分遮挡掉了。</p>
<p>怎么实现呢？同样的，如果是<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.579ex" role="img" focusable="false" viewBox="0 -676 500 698"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"></path></g></g></g></svg></mjx-container>代以及以前的版本，只需要用<code>CSS</code>就能实现。但问题就在于，这是第<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.05ex;" xmlns="http://www.w3.org/2000/svg" width="1.131ex" height="1.557ex" role="img" focusable="false" viewBox="0 -666 500 688"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z"></path></g></g></g></svg></mjx-container>代，<code>CSS</code>实现已经不起作用了。所以只能自行修改<code>source/css/_variables/base.styl</code>文件。</p>
<p>最简单粗暴的方法就是直接修改其中的<code>body-bg-color</code>与<code>content-bg-color</code>为<code>rgba(0, 0, 0, 0)</code>，就能够展现这样的效果：</p>
<p><img data-src="http://images.sakebow.cn/custom/background/%E6%98%BE%E7%A4%BA%E6%9B%B4%E5%A5%BD%E7%9A%84%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87.png" alt="显示更好的背景图片"></p>
<p>看着挺好的。当然你也可以根据自己的喜好设置透明度范围、透明区域，基本上都是这个方法。</p>
<h1 id="你以为跟自定义CSS有关么？"><a href="#你以为跟自定义CSS有关么？" class="headerlink" title="你以为跟自定义CSS有关么？"></a>你以为跟自定义CSS有关么？</h1><p>嗯？结束了啊，你在期待什么？</p>
<p>哦，我明白了，你在期待设定<code>CSS</code>以便直接给定<code>rgba(0, 0, 0, 0)</code>对吧？这样就不会动到这种根本的配置文件了。</p>
<p>但是很可惜，那些东西并不会起到什么作用。</p>
<p>你以为是<code>CSS</code>样式没有起作用？不，起作用了。在开发者工具中能够很清楚地看到<code>rgba(0, 0, 0, 0)</code>生效了，但依然没有变为透明色。</p>
<p>并不是因为是变量所以优先级更高，也并不是因为<code>styl</code>文件比<code>CSS</code>文件更优先，只不过是单纯的因为变量是全局声明的，全局定义的样式优先级更高，所以被覆盖了。</p>
<p>还记得吗，我们最开始使用<code>Vue</code>的时候，<code>style</code>标签中有一个<code>scoped</code>属性。其实就是为了<strong>不让该组件的样式对全局样式造成污染</strong>。</p>
<p>一样的道理。</p>
]]></content>
      <categories>
        <category>customize</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>customize</tag>
      </tags>
  </entry>
  <entry>
    <title>为post设置透明度</title>
    <url>/2023/12/23/custom/transparent-post/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在<a href="/2023/12/21/custom/background/#more">之前的这篇文章</a>中，我们发现了可以设定<code>body-bg-color</code>与<code>content-bg-color</code>为<code>rgba(0, 0, 0, 0)</code>的透明效果。而如果我们想跟官方一样用<code>_config.yml</code>配置呢？</p>
<span id="more"></span>

<h1 id="官方用法"><a href="#官方用法" class="headerlink" title="官方用法"></a>官方用法</h1><p>在官方用法中，我们可以看到很多诸如<code>hexo_config</code>方法的使用，实际上就是访问<code>_config.yml</code>的配置，类似<code>theme_color</code>等。</p>
<p>那么，如果我们在<code>_config.yml</code>文件中设定<code>transparent</code>属性，是不是能够更好地配置博客呢？</p>
<h1 id="设定配置"><a href="#设定配置" class="headerlink" title="设定配置"></a>设定配置</h1><p>我们先在<code>Next_config</code>文件中增加以下配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">transparent:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h1 id="配置读取"><a href="#配置读取" class="headerlink" title="配置读取"></a>配置读取</h1><p>既然我们准备好了配置，那我们就可以直接使用官方提供的配置读取方法获得这个属性了。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">hexo_config</span><span class="params">(<span class="string">&#x27;transparent.enable&#x27;</span>)</span></span></span><br></pre></td></tr></table></figure>

<p>这里将返回我们所设定的<code>true</code>。</p>
<h1 id="修改变量"><a href="#修改变量" class="headerlink" title="修改变量"></a>修改变量</h1><p>由于目前还没有彻底剖析源码，所以在这里就先用侵入性比较强的源码修改方法吧。</p>
<p>在<code>source/css/_variables/base.styl</code>文件中，我们加上这么一段：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">// post-transparent</span></span><br><span class="line"><span class="variable">$body</span>-bg-<span class="attribute">color</span>                = <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">233</span>, <span class="number">244</span>, .<span class="number">25</span>) if <span class="built_in">hexo-config</span>(<span class="string">&#x27;transparent.enable&#x27;</span>);</span><br><span class="line"><span class="variable">$content</span>-bg-<span class="attribute">color</span>             = <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">233</span>, <span class="number">244</span>, .<span class="number">25</span>) if <span class="built_in">hexo-config</span>(<span class="string">&#x27;transparent.enable&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>我们依然能够得到一样的效果：</p>
<p><img data-src="http://images.sakebow.cn/custom/background/%E6%98%BE%E7%A4%BA%E6%9B%B4%E5%A5%BD%E7%9A%84%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87.png" alt="显示更好的背景图片"></p>
<p>很不错对吧？</p>
]]></content>
      <categories>
        <category>customize</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>customize</tag>
      </tags>
  </entry>
</search>
